name: Build & Release
on:
  # 手动触发（在 Actions 页面点击 "Run workflow"）
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag (e.g. v1.2.3). Leave empty for test build.'
        required: false
        type: string
      is_stable:
        description: 'Is this a stable release? (affects changelog & env)'
        required: true
        type: boolean
        default: false

  # 自动触发：推送 v* 标签时
  push:
    tags:
      - 'v*'

env:
  IS_STABLE: ${{ github.event_name == 'push' || (github.event.inputs.is_stable == 'true') }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows
            os: windows-latest
            arch: amd64
          - platform: macos
            os: macos-13
            arch: amd64
          - platform: macos
            os: macos-latest
            arch: arm64
          - platform: android
            os: ubuntu-latest
          - platform: linux
            os: ubuntu-22.04
            arch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Setup Android Signing
        if: startsWith(matrix.platform, 'android')
        run: |
          echo "${{ secrets.KEYSTORE }}" | base64 --decode > android/app/keystore.jks
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/local.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/local.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/local.properties

      - name: Install Windows Build Tools (Inno Setup + jq)
        if: matrix.platform == 'windows'
        shell: bash
        run: |
          choco install innosetup jq -y --no-progress
          echo "C:/Program Files (x86)/Inno Setup 6" >> $GITHUB_PATH
          echo "C:/ProgramData/chocolatey/bin" >> $GITHUB_PATH

      - name: Get Flutter Dependencies
        run: flutter pub get

      - name: Generate SDK Code
        run: |
          cd lib/sdk/flutter_xboard_sdk
          flutter pub get
          dart run build_runner build --delete-conflicting-outputs
          cd ../../..

      - name: Generate Main Project Code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Clean Swift Package Manager Cache
        if: startsWith(matrix.platform, 'macos')
        run: |
          find macos -name "Package.resolved" -delete
          rm -rf macos/Runner.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/
          rm -rf macos/Runner.xcworkspace/xcshareddata/swiftpm/

      - name: Install flutter_distributor (Windows)
        if: matrix.platform == 'windows'
        run: |
          dart pub global activate flutter_distributor
          echo "$HOME/AppData/Local/Pub/Cache/bin" >> $GITHUB_PATH

      - name: Setup Project
        run: dart setup.dart ${{ matrix.platform }} ${{ matrix.arch && format('--arch {0}', matrix.arch) }} ${{ env.IS_STABLE == 'true' && '--env stable' || '' }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.platform }}${{ matrix.arch && format('-{0}', matrix.arch) }}
          path: ./dist
          overwrite: true

  changelog:
    runs-on: ubuntu-latest
    needs: build
    if: env.IS_STABLE == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/heads/main
      - name: Generate Changelog
        run: |
          tags=($(git tag --merged $(git rev-parse HEAD) --sort=-creatordate))
          preTag=$(grep -oP '^## \K.*' CHANGELOG.md | head -n 1)
          currentTag=""
          for ((i = 0; i <= ${#tags[@]}; i++)); do
            if (( i < ${#tags[@]} )); then
              tag=${tags[$i]}
            else
              tag=""
            fi
            if [ -n "$currentTag" ]; then
              if [ "$(echo -e "$currentTag\n$preTag" | sort -V | head -n 1)" == "$currentTag" ]; then
                break
              fi
            fi
            if [ -n "$currentTag" ]; then
              echo "## $currentTag" >> NEW_CHANGELOG.md
              echo "" >> NEW_CHANGELOG.md
              if [ -n "$tag" ]; then
                git log --pretty=format:"%B" "$tag..$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> NEW_CHANGELOG.md
              else
                git log --pretty=format:"%B" "$currentTag" | awk 'NF {print "- " $0} !NF {print ""}' >> NEW_CHANGELOG.md
              fi
              echo "" >> NEW_CHANGELOG.md
            fi
            currentTag=$tag
          done
          cat CHANGELOG.md >> NEW_CHANGELOG.md
          mv NEW_CHANGELOG.md CHANGELOG.md
      - name: Commit Changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "Update changelog" || echo "No changes to commit"
          git push

  upload:
    permissions: write-all
    needs: build
    runs-on: ubuntu-latest
    if: env.IS_STABLE == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist/
          pattern: artifact-*
          merge-multiple: true

      - name: Generate release.md
        run: |
          git log --oneline -n 20 > release.md
          echo -e "\n---\nFull changelog in CHANGELOG.md" >> release.md

      - name: Generate SHA256 checksums
        run: |
          cd ./dist
          for file in $(find . -type f -not -name "*.sha256"); do
            sha256sum "$file" > "${file}.sha256"
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.version_tag || github.ref_name }}
          files: ./dist/*
          body_path: './release.md'
